{"version":3,"sources":["Checkbox.js","App.js","serviceWorker.js","index.js"],"names":["Checkbox","state","checked","change","_this","setState","_this2","this","react_default","a","createElement","props","todo","rel","href","className","type","onClick","removeItem","index","React","Component","App","formData","todoInfo","list","updateForm","event","newData","target","value","originalState","copy","Object","assign","name","submitForm","preventDefault","slice","push","console","log","deleteItems","splice","map","src_Checkbox","onSubmit","onChange","placeholder","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.16cc0dca.chunk.js","sourcesContent":["import React from 'react'\nclass Checkbox extends React.Component {\n    state = {\n        checked: 'false',\n    }\n\n    change = () => {\n        if (this.state.checked === 'false') {\n            this.setState({ checked: 'checked' });\n        } else {\n            this.setState({ checked: 'false' })\n        }\n    }\n\n    render() {\n        // console.log(this.state);\n\n        return (\n            <div>\n\n                {this.props.todo === \"\" ? \"\" : (\n                    <div>\n                        {/* adding checkbox style  */}\n                        <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\" />\n                        <div className=\"center\">\n                            <label className=\"labelT\">\n                                <input className=\"label__checkbox\" type=\"checkbox\" onClick={this.change} />\n                                <span className=\"label__text\">\n                                    <span className=\"label__check\">\n                                        <i className=\"fa fa-check icon\"></i>\n                                    </span>\n                                </span>\n                            </label>\n                        </div>\n                        <p className={this.state.checked} >\n                            {this.props.todo} <label className='labelX' onClick={() => this.props.removeItem(this.props.index)} > X </label> </p>\n\n                    </div>)}\n\n            </div>\n        );\n    }\n\n\n}\nexport default Checkbox;","import React, { Component } from 'react';\nimport './App.css';\nimport Checkbox from './Checkbox';\n\n\nclass App extends Component {\n  state = {\n    formData: {\n      todoInfo: ' '\n    },\n    list: [],\n\n  }\n  // Add to the form with new value \n  updateForm = (event) => {\n    // get the value the user entered\n    const newData = event.target.value\n    // get the original state value \n    const originalState = this.state.formData\n    // create copy of the originalState\n    const copy = Object.assign({}, originalState)\n    // create key to store the name of the input \n    const key = event.target.name\n    // update the copy to the value the user entered\n    copy[key] = newData\n    this.setState({\n      // update the state with the new copy\n      formData: copy\n    })\n  }\n  submitForm = (event) => {\n    // prevent the form from refreshing the page\n    event.preventDefault()\n    // add the new data to the array[]\n    const copy = this.state.list.slice(0)\n    // update the state wuth our new copy\n    copy.push(this.state.formData.todoInfo)\n    console.log(copy)\n    this.setState({\n      list: copy,\n      //let the input empty to write again \n      formData: {\n        todoInfo: ''\n      }\n    })\n    // console.log(this.state.list)\n  }\n  //delete button to delete all of the list array and clear the form \n  deleteItems = (event) => {\n    this.setState({\n      list: [],\n\n    })\n  }\n  // to remove one item from the form \n  removeItem = (index) => {\n    console.log(index);\n    //create copy of the list array \n    const copy = this.state.list\n    // splice one index from the array \n    copy.splice(index, 1)\n    this.setState({\n      list: copy,\n    })\n  }\n\n\n  render() {\n    const list = this.state.list.map((todo, index) => <Checkbox todo={todo} index={index} removeItem={this.removeItem} />)\n\n    return (\n      <div className='mainDiv'>\n        <form onSubmit={this.submitForm}>\n          <br />\n          <br />\n          <label> <h1>Todos </h1> <br />\n            <input type='text' name='todoInfo' className='input' onChange={this.updateForm} value={this.state.formData.todoInfo} placeholder={\"What's need to be done !\"}></input>\n\n          </label>\n          <button type='submit' > Add ! </button>\n          <button onClick={this.deleteItems}> Delete ! </button>\n        </form>\n        {list}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/bootstrap/dist/css/bootstrap.css'\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}